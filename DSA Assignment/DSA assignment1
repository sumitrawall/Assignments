 ðŸ’¡ Q1. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example: Input: nums = [2,7,11,15], target = 9 Output0 [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1][

SOLUTION:-
def two_sum(nums, target):
    num_map = {}  # Dictionary to store number:index pairs
    
    for index, num in enumerate(nums):
        complement = target - num
        
        if complement in num_map:
            return [num_map[complement], index]
        
        num_map[num] = index
    
    return []  # If no solution is found

# Test the function
nums = [2, 7, 11, 15]
target = 9
result = two_sum(nums, target)
print(f"Output: {result}")


ðŸ’¡ Q2. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
â€¢	Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
â€¢	Return k.
Example : Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,*,*]
Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores)[

SOLUTION:-

def removeElement(nums, val):
    k = 0  # Variable to keep track of elements not equal to val

    for num in nums:
        if num != val:
            nums[k] = num
            k += 1

    return k

# Test the function with the given example
nums = [3, 2, 2, 3]
val = 3
result = removeElement(nums, val)

print("Output:", result)
print("nums =", nums[:result], end="")
if result < len(nums):
    print(" + ['_', ...]")  # Indicate that there are additional elements with underscores
else:
    print()  # No additional elements


ðŸ’¡ Q3. Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1: Input: nums = [1,3,5,6], target = 5
Output: 2

SOLUTION:-
def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = left + (right - left) // 2
        
        if nums[mid] == target:
            return mid
        
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return left

# Test the program with the given example
nums = [1, 3, 5, 6]
target = 5
result = searchInsert(nums, target)
print("Output:", result)


ðŸ’¡ **Q4.** You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.
Example 1: Input: digits = [1,2,3] Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4].

SOLUTION:-
def increment(digits):
    # Start from the rightmost digit
    i = len(digits) - 1

    # Iterate through the digits from right to left
    while i >= 0:
        # Increment the current digit by 1
        digits[i] += 1

        # If the digit becomes 10, carry over to the next digit
        if digits[i] == 10:
            digits[i] = 0
            i -= 1
        else:
            break

    # If the leftmost digit becomes 0, insert a new digit at the beginning
    if digits[0] == 0:
        digits.insert(0, 1)

    return digits


# Example usage
digits = [1, 2, 3]
result = increment(digits)
print(result)


ðŸ’¡ 5.You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

SOLUTION:-
def merge(nums1, m, nums2, n):
    # Create copies of the first m elements of nums1 and nums2
    nums1_copy = nums1[:m]
    nums2_copy = nums2[:n]
    
    # Initialize pointers for nums1_copy, nums2_copy, and nums1
    p1 = 0  # Pointer for nums1_copy
    p2 = 0  # Pointer for nums2_copy
    p = 0   # Pointer for nums1
    
    # Merge nums1_copy and nums2_copy into nums1
    while p1 < m and p2 < n:
        if nums1_copy[p1] <= nums2_copy[p2]:
            nums1[p] = nums1_copy[p1]
            p1 += 1
        else:
            nums1[p] = nums2_copy[p2]
            p2 += 1
        p += 1
    
    # Copy the remaining elements of nums1_copy, if any
    while p1 < m:
        nums1[p] = nums1_copy[p1]
        p1 += 1
        p += 1
    
    # Copy the remaining elements of nums2_copy, if any
    while p2 < n:
        nums1[p] = nums2_copy[p2]
        p2 += 1
        p += 1

# Example usage:
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3

merge(nums1, m, nums2, n)
print(nums1)  # Output: [1, 2, 2, 3, 5, 6]

ðŸ’¡ **Q6.** Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1: Input: nums = [1,2,3,1]
Output: true

SOLUTION:-
def containsDuplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        else:
            num_set.add(num)

    return False

# Example usage
nums = [1, 2, 3, 1]
print(containsDuplicate(nums))

ðŸ’¡ Q7. Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.
Note that you must do this in-place without making a copy of the array.
Example 1: Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0]

SOLUTION:-
def move_zeros(nums):
    # Initialize two pointers
    left = 0
    right = 0
    
    # Move nonzero elements to the left side of the array
    while right < len(nums):
        if nums[right] != 0:
            nums[left] = nums[right]
            left += 1
        right += 1
    
    # Fill the remaining elements with zeros
    while left < len(nums):
        nums[left] = 0
        left += 1
    
    return nums


# Example usage
nums = [0, 1, 0, 3, 12]
result = move_zeros(nums)
print(result)

#Output:- [1, 3, 12, 0, 0]

ðŸ’¡ **Q8.** You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.
You are given an integer array nums representing the data status of this set after the error.
Find the number that occurs twice and the number that is missing and return them in the form of an array.
Example 1: Input: nums = [1,2,2,4] Output: [2,3]

SOLUTION:-
def findErrorNums(nums):
    n = len(nums)
    num_set = set()
    duplicate = 0
    total_sum = n * (n + 1) // 2  # Sum of all numbers from 1 to n
    
    for num in nums:
        if num in num_set:
            duplicate = num
        else:
            num_set.add(num)
            total_sum -= num
    
    missing = total_sum + duplicate
    return [duplicate, missing]


# Example usage
nums = [1, 2, 2, 4]
result = findErrorNums(nums)
print(result)

#output:- [2, 5]





